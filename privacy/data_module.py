# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_data.ipynb.

# %% auto 0
__all__ = ['get_dummy', 'get_datamodule_and_ml_module']

# %% ../nbs/02_data.ipynb 2
from sklearn.datasets import make_classification
from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
import numpy as np
from sklearn.utils import shuffle
from sklearn.base import BaseEstimator
from relax.data_module import DataModule, load_data
from relax.ml_model import MLModule, load_ml_module
from relax.utils import get_config
import relax

# %% ../nbs/02_data.ipynb 3
def get_dummy(n_samples=10_000, n_features=10, *, rng=None, **sk_args) -> tuple[DataModule, MLModule]:
    if rng is None:
        rng = np.random.RandomState(0)
    xs, ys = make_classification(n_samples, n_features=n_features, random_state=rng, **sk_args)
    dm = DataModule.from_numpy(xs, ys)
    ml_module = MLModule().train(dm, epochs=50, batch_size=32, verbose=0)
    return dm, ml_module

# %% ../nbs/02_data.ipynb 4
def get_datamodule_and_ml_module(data_name: str) -> tuple[DataModule, MLModule]:
    if data_name == 'dummy':
        return get_dummy()
    return load_data(data_name), load_ml_module(data_name)
